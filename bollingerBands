#Tuto's link: https://medium.com/codex/algorithmic-trading-with-bollinger-bands-in-python-1b0a00c9ef99
#import modules required

!pip install yfinance
import pandas as pd 
import matplotlib.pyplot as plt 
import requests
import math
import numpy as np
from termcolor import colored as cl
import yfinance as yf

#Set up parameters

equity = yf.Ticker ("TLSA")
startDate = '2020-01-01'
endDate = '2021-06-22'
stockDf = equity.history(interval="1d",start=startDate, end=endDate)

#Calculation of the sma

def sma(data, window):
    sma = data.rolling(window = window).mean()
    return sma

stockDf['sma_20'] = sma(stockDf['Close'], 20)
stockDf.tail()

#Calculation of the bollingerBands

def bollingerBands (data, sma, window):
  std = data.rolling(window = window).std()
  upperBollingerBand = sma + std * 2
  lowerBollingerBand = sma - std * 2
  return upperBollingerBand, lowerBollingerBand

stockDf['upperBollingerBand'], stockDf['lowerBollingerBand'] = bollingerBands(stockDf['Close'], stockDf ['sma_20'], 20)
stockDf.tail()

#plot results of the bollingerBands

stockDf['Close'].plot(label = 'Close PRICES', color = 'skyblue')
stockDf['upperBollingerBand'].plot(label = 'UPPER BB 20', linestyle = '--', linewidth = 1, color = 'black')
stockDf['sma_20'].plot(label = 'SMA 20',  linestyle = '--', linewidth = 1, color = 'grey')
stockDf['lowerBollingerBand'].plot(label = 'LOWER BB 20', linestyle = '--', linewidth = 1, color = 'black')
plt.show()

#implementing our trading strategy

def implementBollingerBandsStrategy (data, lowerBollingerBand, UpperBollingerBand):
  buyPrice = []
  sellPrice = []
  bollingerBandsSignal = []
  signal = 0

  for i in range(len(data)):
    if data[i-1] > lowerBollingerBand [i-1] and data[i] < lowerBollingerBand [i]:
      if signal != 1:
        buyPrice.append(data[i])
        sellPrice.append(np.nan)
        signal = 1
        bollingerBandsSignal.append(signal)
      else:
        buyPrice.append(np.nan)
        sellPrice.append(np.nan)
        bollingerBandsSignal.append(0)
    elif data [i-1] < UpperBollingerBand[i-1] and data[i] > UpperBollingerBand [i]:
      if signal != -1:
        buyPrice.append(np.nan)
        sellPrice.append(data[i])
        signal = -1
        bollingerBandsSignal.append(signal)
      else:
        buyPrice.append(np.nan)
        sellPrice.append(np.nan)
        bollingerBandsSignal.append(0)
    else:
      buyPrice.append(np.nan)
      sellPrice.append(np.nan)
      bollingerBandsSignal.append(0)
  
  return buyPrice, sellPrice, bollingerBandsSignal


buyPrice, sellPrice, bollingerBandsSignal = implementBollingerBandsStrategy(stockDf['Close'], stockDf['lowerBollingerBand'], stockDf['upperBollingerBand'])

#plotting the graph of trading strategy

stockDf['Close'].plot(label = 'Close PRICES', color = 'skyblue')
stockDf['upperBollingerBand'].plot(label = 'UPPER BB 20', linestyle = '--', linewidth = 1, color = 'black')
stockDf['sma_20'].plot(label = 'SMA 20',  linestyle = '--', linewidth = 1, color = 'grey')
stockDf['lowerBollingerBand'].plot(label = 'LOWER BB 20', linestyle = '--', linewidth = 1, color = 'black')
plt.scatter(stockDf.index, buyPrice, marker='^', color = 'green', label = 'BUY', s=200)
plt.scatter(stockDf.index, sellPrice, marker='v', color = 'red', label = 'SELL', s=200)
plt.title('stockDf BOLLINGER BANDS TRADING STRATEGY')
plt.legend(loc = 'upper left')
plt.show()

#Check if we hold the hold the stock or not

position = []

for i in range (len(bollingerBandsSignal)):
  if bollingerBandsSignal [i] > 1:
    position.append(0)
  else:
    position.append(1)

for i in range(len(stockDf['Close'])):
  if bollingerBandsSignal[i] == 1:
    position [i] = 1
  elif bollingerBandsSignal[i] == -1:
    position [i] = 0
  else:
    position [i] = position [i-1]

upperBollingerBand = stockDf['upperBollingerBand']
lowerBollingerBand = stockDf['lowerBollingerBand']
ClosePrice = stockDf ['Close']
bollingerBandsSignal = pd.DataFrame(bollingerBandsSignal).rename(columns = {0:'bollingerBandsSignal'}).set_index(stockDf.index)
position = pd.DataFrame(position).rename(columns = {0:'bollingerBandsPosition'}).set_index(stockDf.index)

frames = [ClosePrice, upperBollingerBand, lowerBollingerBand, bollingerBandsSignal, position]
strategy = pd.concat(frames, join = 'inner', axis = 1)
strategy = strategy.reset_index().drop('Date', axis = 1)

strategy

#Backtesting our strategy

stockDfRet = pd.DataFrame(np.diff(stockDf['Close'])).rename(columns = {0:'returns'})
bollingerBandsStrategyReturn = []

for i in range(len(stockDfRet)):
  try:
    returns = stockDfRet['returns'][i]*strategy['bollingerBandsPosition'][i]
    bollingerBandsStrategyReturn.append(returns)
  except:
    pass

bollingerBandsStrategyReturnDataFrame = pd.DataFrame(bollingerBandsStrategyReturn).rename(columns = {0:'bollingerBandsReturns'})

investmentValue = 100000
numberOfStocks = math.floor(investmentValue/stockDf['Close'][-1])
bollingerBandsInvestmentReturn = []

for i in range (len(bollingerBandsStrategyReturnDataFrame['bollingerBandsReturns'])):
  returns = numberOfStocks*bollingerBandsStrategyReturnDataFrame['bollingerBandsReturns'][i]
  bollingerBandsInvestmentReturn.append(returns)

bollingerBandsInvestmentReturnDataFrame = pd.DataFrame(bollingerBandsInvestmentReturn).rename(columns = {0:'investmentReturns'})
totalInvestmentReturn = round(sum(bollingerBandsInvestmentReturnDataFrame['investmentReturns']), 2)
profitPercentage = math.floor((totalInvestmentReturn/investmentValue)*100)
print('Profit gained from the bollinger band strategy by investing ', investmentValue, 'in TLSA: {}'.format(totalInvestmentReturn))
print('Profit percentage of the bollinger band strategy : {}%'.format(profitPercentage))
